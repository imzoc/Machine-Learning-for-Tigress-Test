#include "../header.h"

#include <stdio.h>
#include <stdlib.h>
 
typedef struct {
    int priority;
    int data;
} node_t;
 
typedef struct {
    node_t *nodes;
    int len;
    int size;
} heap_t;
 
void tigress_init () {
}

void tigress_obf (heap_t *h, int priority, int data) {
    if (h->len + 1 >= h->size) {
        h->size = h->size ? h->size * 2 : 4;
        h->nodes = (node_t *)realloc(h->nodes, h->size * sizeof (node_t));
    }
    int i = h->len + 1;
    int j = i / 2;
    while (i > 1 && h->nodes[j].priority > priority) {
        h->nodes[i] = h->nodes[j];
        i = j;
        j = j / 2;
    }
    h->nodes[i].priority = priority;
    h->nodes[i].data = data;
    h->len++;
}
 
int pop (heap_t *h) {
    int i, j, k;
    if (!h->len) {
        return 100;
    }
    int data = h->nodes[1].data;
    h->nodes[1] = h->nodes[h->len];
    h->len--;
    i = 1;
    while (1) {
        k = i;
        j = 2 * i;
        if (j <= h->len && h->nodes[j].priority < h->nodes[k].priority) {
            k = j;
        }
        if (j + 1 <= h->len && h->nodes[j + 1].priority < h->nodes[k].priority) {
            k = j + 1;
        }
        if (k == i) {
            break;
        }
        h->nodes[i] = h->nodes[k];
        i = k;
    }
    h->nodes[i] = h->nodes[h->len + 1];
    return data;
}
 
int main () {
    int result = 1;

   tigress_init();

    heap_t *h = (heap_t *)calloc(1, sizeof (heap_t));
    tigress_obf(h, 3, 3);
    tigress_obf(h, 4, 4);
    tigress_obf(h, 5, 5);
    tigress_obf(h, 1, 1);
    tigress_obf(h, 2, 2);
    int i;
    int last = pop(h);
    for (i = 0; i < 4; i++) {
       int v = pop(h);
       if (last > v)
          result=0;
    }

   if (result == 1) 
      printf("SUCCESS %s\n", NAME);
   else
      printf("FAILURE %s\n", NAME);
    return 0;
}
 
